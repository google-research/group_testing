import group_testing.group_selectors.mutual_information
import group_testing.group_selectors.origami
import group_testing.group_selectors.random
import group_testing.group_selectors.split
import group_testing.group_selectors.informative_dorfman
import group_testing.policy
import group_testing.samplers.sequential_monte_carlo
import group_testing.samplers.loopy_belief_propagation
import group_testing.samplers.kernels
import group_testing.wet_lab


## WetLab parameters

# How many patients will be tested during the experiment.
WetLab.num_patients = 32

# Ground truth sensitivity and specificity of the testing environment,
# respectively the probability that an infected person's sample tests positive,
# and the probability that a non-infected person's sample returns negative.
# These parameters can be either described as a single float, in which case they
# will be used by the simulator to produce tests no matter what the group size
# is, or as an array of floats, in which case the i-th element of the array will
# refer to the sensitivity/specificity parameter for groups of size i.
WetLab.sensitivity = 0.85
WetLab.specificity = 0.97

# Base infection rate guides the generation of a random diseased status vector.
# When given as a single float, each patient i will be infected with probability
# base_infection_rate. If num_patients floats are given, each patient will have
# its own different probability. If the infection status vector is known, one
# should simply pass it on to the wetlab as an array [0, 1, 0, 0, etc..]
# where 1 stands for an infected patient.
WetLab.base_infection_rate = 0.06

# This parameter should be set to False if one wishes to resample the diseased
# status vector across multiple simulations, when Simulator.num_simulations > 1
WetLab.freeze_diseased = False



## Simulator parameters

# number of simulations done in a single run. If that parameter is larger
# than 1, you may want to set WetLab.freeze_diseased to False to resample a new
# groundtruth vector for each simulation.
Simulator.num_simulations = 1

# maximal size of a group (or pool). This is typically in the range of 5~32
Simulator.max_group_size = 5

# number of tests available in the testing device per cycle.
Simulator.num_tests_per_cycle = 6

# total number of cycles that the experiment can use
Simulator.max_test_cycles = 4

# Prior (best guess) on the specificity and sensitivity of the WetLab
# formulated by sampler and policy objects.
# When the problem is well specified (i.e. the sampler and policy have
# an accurate knowledge of device noise) these values should match those
# defined for the WetLab. When there is misspecification, there might be a
# discrepancy. As with the WetLab, these parameters can be single float or
# arrays thereof.
Simulator.prior_specificity = 0.97
Simulator.prior_sensitivity = 0.85

# Prior (best guess) on infection for all num_patients formulated by sampler and
# policy.
Simulator.prior_infection_rate = 0.03

# Ensure metrics are exported regularly, after carrying out a few simulations.
Simulator.export_metrics_every = 5

# Initialize WetLab and Policy for Simulator
Simulator.wetlab = @WetLab()
Simulator.policy = @Policy()

# Set the policies selectors in sequential order. The last selector will be used
# by default at later stages.
Policy.selectors = (@MaxMutualInformation(),)

# Parameter for the G-MIMAX strategy.
MaxMutualInformation.forward_iterations = 2
MaxMutualInformation.backward_iterations = 1

# Set the sampler to be SmcSampler (needed by G-MIMAX).
Simulator.sampler = @SmcSampler()

# Number of particles used by G-MIMAX
SmcSampler.num_particles = 5000

# When receiving new test results, the sampler can either resample from scratch
# (True) or use previous samples if they have been stored and only incorporate
# the most recent wave of test results (False).
SmcSampler.resample_at_each_iteration = False

# MCMC Kernel
SmcSampler.kernel = @Gibbs()
Gibbs.cycles = 4
Gibbs.liu_modification = True

# To decode results we use by default a LBP sampler
Simulator.cheap_sampler = @LbpSampler()
LbpSampler.max_iterations = 100



